
    public static int[] firstCollisionIndex(ThrustMove move1, ThrustMove move2)
    {
        double radius = SHIP_RADIUS * 2;
        double x1 = move1.getShip().getXPos();
        double x2 = move2.getShip().getXPos();
        double y1 = move1.getShip().getYPos();
        double y2 = move2.getShip().getYPos();

        double dx = x1 - x2;
        double dy = y1 - y2;
        double dvx = move1.dX() - move2.dX();
        double dvy = move1.dY() - move2.dY();

        double a = dvx * dvx + dvy * dvy;
        double b = 2 * (dx * dvx + dy * dvy);
        double c = dx * dx + dy * dy - radius * radius;
        double d = b * b - 4 * a * c;

        double time;
        if (a == 0.0)
        {
            if (b == 0.0)
            {
                if (c <= 0.0)
                    time = 0;
                else
                    time = -1;
            }
            else
            {
                double t = - c / b;
                if (t >= 0.0)
                    time = t;
                else
                    time = -1;
            }
        }
        else if (d == 0.0)
        {
            time = - b / (2 * a);
        }
        else if (d > 0)
        {
            double t1 = - b + Math.sqrt(d);
            double t2 = - b - Math.sqrt(d);

            if (t1 >= 0.0 && t2 >= 0.0)
                time = Math.min(t1, t2) / (2 * a);
            else if (t1 <= 0.0 && t2 <= 0.0)
                time = Math.max(t1, t2) / (2 * a);
            else
                time = 0;
        }
        else
            time = -1;

        int thrust1 = (int)(move1.getThrust() * time);
        int thrust2 = (int)(move2.getThrust() * time);

        return new int[]{thrust1, thrust2};
    }

    public static int[][] allCollisionIndices(ThrustMove move1, ThrustMove move2)
    {
        int[] collisions1 = new int[move1.getThrust()];
        int[] collisions2 = new int[move2.getThrust()];

        VectorBasic v1 = new VectorBasic(move1.getShip().getXPos(), move1.getShip().getYPos());
        VectorBasic v2 = new VectorBasic(move1.getShip().getXPos(), move1.getShip().getYPos());

        for (double i = 0.0; i <= 1; i += 0.1)
        {
            VectorBasic r1 = new VectorBasic(move1.dX() * i, move1.dY() * i);
            VectorBasic r2 = new VectorBasic(move2.dX() * i, move2.dY() * i);

            VectorBasic p1 = v1.add(r1);
            VectorBasic p2 = v2.add(r2);

            int thrust1 = (int)(move1.getThrust() * i) + 1;
            int thrust2 = (int)(move1.getThrust() * i) + 1;

            if (p1.subtract(p2).length() < SHIP_RADIUS * 2 + 0.1)
            {
                collisions1[thrust1] = 1;
                collisions2[thrust2] = 1;
            }
        }

        return new int[][]{collisions1, collisions2};
    }


    public static boolean willCollideCrossVectors(ThrustMove m1, ThrustMove m2)
    {
        VectorBasic v1 = new VectorBasic(m1.getShip().getXPos(), m1.getShip().getYPos());
        VectorBasic v2 = new VectorBasic(m2.getShip().getXPos(), m2.getShip().getYPos());

        VectorBasic r1 = new VectorBasic(m1.dX(), m1.dY());
        VectorBasic r2 = new VectorBasic(m2.dX(), m2.dY());

        VectorBasic p1 = v1.add(r1);
        VectorBasic p2 = v2.add(r2);

        VectorBasic newDiff = p1.subtract(p2);

        Double cross = r1.cross(r2);
        VectorBasic diff = v1.subtract(v2);

        if(newDiff.length() < SHIP_RADIUS * 2 + 0.1)
        {
            return true;
        }
        else
        {
            if (cross < 0.01 && cross > -0.01)
                return false;

            Double c1 = diff.cross(r1);
            Double c2 = diff.cross(r2);

            Double t = - c1 / cross;
            Double u = - c2 / cross;

            if (t > 0 && t < 1 && u > 0 && u < 1)
                return true;
            else
                return false;
        }
    }

    public static boolean willCollideIterative(ThrustMove m1, ThrustMove m2)
    {
        VectorBasic v1 = new VectorBasic(m1.getShip().getXPos(), m1.getShip().getYPos());
        VectorBasic v2 = new VectorBasic(m2.getShip().getXPos(), m2.getShip().getYPos());

        for (double i = 0.0; i <= 1; i += 0.05)
        {
            VectorBasic r1 = new VectorBasic(m1.dX() * i, m1.dY() * i);
            VectorBasic r2 = new VectorBasic(m2.dX() * i, m2.dY() * i);

            VectorBasic p1 = v1.add(r1);
            VectorBasic p2 = v2.add(r2);

            if (p1.subtract(p2).length() < SHIP_RADIUS * 2 + 0.1)
                return true;
        }

        return false;
    }